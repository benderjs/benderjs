#!/usr/bin/env node
var argParser = require('nomnom'),
    path = require('path'),
    di = require('di'),

    dir = '../lib/',

    applications = require(dir + 'applications'),
    assertion = require(dir + 'assertion'),
    clients = require(dir + 'clients'),
    config = require(dir + 'config'),
    constants = require(dir + 'constants'),
    emitter = require(dir + 'emitter'),
    filesystem = require(dir + 'filesystem'),
    logger = require(dir + 'logger'),
    plugins = require(dir + 'plugins'),
    server = require(dir + 'server'),
    sockets = require(dir + 'sockets'),
    tests = require(dir + 'tests'),

    log = logger.create('cli');

argParser.command('init')
    .callback(initialize)
    .help('Initialize Bender.js for this directory');

argParser.command('server')
    .callback(startServer)
    .option('port', {
        abbr: 'p',
        default: constants.PORT,
        help: 'Port on which the server will run'
    })
    .option('hostname', {
        abbr: 'H', // YEAH... should be "h" but it's reserved for nomnom's help
        default: constants.HOSTNAME,
        help: 'Hostname used to run server'
    })
    .option('config', {
        abbr: 'c',
        help: 'Alternative path to Bender.js configuration file'
    })
    .help('Start Bender.js server');

argParser.command('version')
    .callback(function () {
        log.info('Bender.js v%s', constants.VERSION);
    })
    .help('Print Bender.js version');

argParser.parse();

function startServer(options) {
    var cfg, modules, injector;

    function start(server, injector) {

        injector.get('bender-qunit');

        server.listen(options.port, options.hostname, function () {
            log.info('Bender.js v%s Server started at http://%s:%s', constants.VERSION, options.hostname, options.port);
        });
    }

    cfg = config.load(path.resolve(process.cwd(), options.config || 'bender.js'));

    modules = [{
        applications: ['type', applications],
        assertion: ['type', assertion],
        clients: ['value', clients],
        config: ['value', cfg],
        constants: ['value', constants],
        emitter: ['type', emitter],
        filesystem: ['value', filesystem],
        logger: ['value', logger],
        server: ['factory', server.create],
        sockets: ['type', sockets],
        tests: ['type', tests]
    }].concat(plugins.load(cfg.plugins));

    injector = new di.Injector(modules);

    injector.invoke(start);
}

function initialize(options) {
    // TODO create config file for current directory    
}
