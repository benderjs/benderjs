#!/usr/bin/env node

/**
 * Copyright (c) 2014, CKSource - Frederico Knabben. All rights reserved.
 * Licensed under the terms of the MIT License (see LICENSE.md).
 *
 * @file Bender executable
 */

'use strict';

var scmd = require( 'subcommander' ),
	dir = '../lib/',
	constants = require( dir + 'constants' ),
	cli = require( dir + 'cli' ),
	server;

scmd.scriptName( 'bender' );

scmd.command( 'init', {
	callback: cli.initialize,
	desc: 'Initialize Bender.js for this directory'
} );

scmd.command( 'clean', {
	callback: cli.clean,
	desc: 'Clean all Bender.js local files except the configuration'
} );

scmd
	.option( 'port', {
		abbr: 'p',
		desc: 'Port on which the server will listen'
	} )
	.option( 'hostname', {
		abbr: 'H', // "h" is reserved for "help"
		desc: 'Hostname used to run the server'
	} )
	.option( 'config', {
		abbr: 'c',
		default: constants.CONFIG_NAME,
		desc: 'Alternative path to Bender.js configuration file'
	} )
	.option( 'debug', {
		abbr: 'd',
		description: 'Enable debug logs',
		flag: true
	} );

server = scmd
	.command( 'server', {
		callback: cli.handleServer,
		desc: 'Handle Bender.js server'
	} );

server.command( 'start', {
	callback: cli.serverStart,
	desc: 'Start the server as a daemon'
} );

server.command( 'stop', {
	callback: cli.serverStop,
	desc: 'Stop the server'
} );

server.command( 'status', {
	callback: cli.serverStatus,
	desc: 'Show the server\'s status'
} );

server.command( 'restart', {
	callback: cli.serverRestart,
	desc: 'Restart the server'
} );

server.command( 'run', {
	callback: cli.runServer,
	desc: 'Run the server in a verbose mode'
} );

scmd.command( 'version', {
	callback: function() {
		console.log( 'Bender.js v%s', constants.VERSION );
	},
	desc: 'Print Bender.js version'
} );

scmd
	.command( 'run', {
		callback: cli.runTests,
		desc: 'Run the tests in a browser and output the results to the console'
	} )
	.option( 'browser', {
		abbr: 'b',
		desc: 'Browser to run the tests on'
	} )
	.option( 'list', {
		abbr: 'l',
		flag: true,
		desc: 'List all the available browsers'
	} );

scmd.parse();
