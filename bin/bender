#!/usr/bin/env node
var argParser = require('nomnom'),
    path = require('path'),
    broadway = require('broadway'),
    forever = require('forever'),

    dir = '../lib/',

    applications = require(dir + 'applications'),
    builders = require(dir + 'builders'),
    browsers = require(dir + 'browsers'),
    cache = require(dir + 'cache'),
    conf = require(dir + 'config'),
    constants = require(dir + 'constants'),
    jobs = require(dir + 'jobs'),
    middleware = require(dir + 'middleware'),
    plugins = require(dir + 'plugins'),
    reporters = require(dir + 'reporters'),
    server = require(dir + 'server'),
    sockets = require(dir + 'sockets'),
    template = require(dir + 'template'),
    tests = require(dir + 'tests'),
    utils = require(dir + 'utils'),

    log = require(dir + 'logger').create('cli');

argParser.command('init')
    .callback(initialize)
    .help('Initialize Bender.js for this directory');

argParser.command('server')
    .callback(handleServer)
    .option('port', {
        abbr: 'p',
        default: constants.PORT,
        help: 'Port on which the server will run'
    })
    .option('hostname', {
        abbr: 'H', // YEAH... should be "h" but it's reserved for nomnom's help
        default: constants.HOSTNAME,
        help: 'Hostname used to run server'
    })
    .option('config', {
        abbr: 'c',
        help: 'Alternative path to Bender.js configuration file'
    })
    .help('Start Bender.js server');

argParser.command('version')
    .callback(function () {
        log.info('Bender.js v%s', constants.VERSION);
    })
    .help('Print Bender.js version');

argParser.parse();

/**
 * Handle server command line
 * @param {Object} options Command line options
 */
function handleServer(options) {
    switch (options[1]) {
        case 'start':
            getMeta(function (meta) {
                if (meta) log.info('Bender server is already running');
                else startDaemon();
            });
            break;

        case 'stop':
            forever.stop(__filename)
                .on('stop', function () {
                    log.info('Bender server stopped successfully');
                })
                .on('error', function () {
                    log.error('Bender server not running or user not authorized to stop it');
                });
            break;

        case 'restart':
            getMeta(function (meta) {
                if (meta) {
                    forever.stop(__filename)
                        .on('stop', function () {
                            log.info('Bender server stopped successfully');
                            startDaemon();
                        });
                } else {
                    startDaemon();
                }
            });
            break;

        case 'status':
            getMeta(function (meta) {
                if (meta) log.info('Bender server is running since ' + new Date(meta.ctime));
                else log.error('Bender server is not running or user not authorized to see the status');
            });
            break;

        case 'run':
            startServer(options);
            break;

        default: // TODO improve this help part / include in cli help
            log.info('Yo can use start, stop, restart or status commands');
    }
}

/**
 * Get child process metadata
 * @param  {Function} callback Function called when done
 */
function getMeta(callback) {
    forever.list(false, function (err, list) {
        if (err || !list) return callback(null);

        list.some(function (meta) {
            if (meta.file === __filename) {
                callback(meta);
                return true;
            }
        });
    });
}

/**
 * Restart this script as a deamon
 */
function startDaemon() {
    var opts, child;

    opts = process.argv.slice(2);
    opts[1] = 'run';

    child = forever.startDaemon(__filename, {
        max: 3,
        silent: false,
        outFile: 'bender-out.log',
        errFile: 'bender-err.log',
        options: opts
    });

    child.on('error', function (err) {
        log.error('child process error', err);
    });

    child.on('exit', function () {
        log.error('child process exit after 3 retries');
    });

    log.info('Bender server started successfully');
}

/**
 * Start bender server
 * @param  {Object} options Command line options
 * @return {[type]}         [description]
 */
function startServer(options) {
    var bender = new broadway.App({ delimeter: ':' }),
        modules = [
            plugins, utils, applications, builders, middleware, browsers,
            cache, template, constants, tests, jobs, sockets, server
        ].concat(reporters.modules);

    bender.use(conf, {
        path: path.resolve(process.cwd(), options.config || 'bender.js')
    });

    modules.forEach(function (module) { bender.use(module); });

    bender.init(function (err) {
        if (err) {
            log.error(err);
            process.exit(1);
        }

        bender.server
            .create()
            .listen(
                options.port,
                options.hostname,
                function () {
                    log.info(
                        'Bender.js v%s Server started at http://%s:%s',
                        bender.constants.VERSION,
                        options.hostname,
                        options.port
                    );
                }
            );
    });
}

function initialize(options) {
    // TODO create config file for current directory    
}
